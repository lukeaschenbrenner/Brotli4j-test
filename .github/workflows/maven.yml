name: Java CI with Maven

on:
  push:
    branches:
      - main
  pull_request:
    
  workflow_dispatch:
    inputs:
      name:
        description: 'Github Actions'
        required: true
        default: 'Github Actions'

jobs:

  MacOS-x86_64-Build-JDK8:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: 8
          architecture: x64
      - name: Build with Maven
        run: mvn -B -ntp clean package --file pom.xml
      - name: Upload the build
        uses: actions/upload-artifact@v3
        with:
          name: MacOS-x86_64-Build-JDK8
          path: /Users/runner/work/Brotli4j/

  MacOS-x86_64-Build-JDK11:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: 11
          architecture: x64
      - name: Build with Maven
        run: mvn -B -ntp clean package --file pom.xml

  MacOS-x86_64-Build-JDK17:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: 17
          architecture: x64
      - name: Build with Maven
        run: mvn -B -ntp clean package --file pom.xml

  Linux-x86_64-Build-JDK8:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: build centos6
        run: docker-compose -f docker/docker-compose.yml run build
      - name: Upload the build
        uses: actions/upload-artifact@v3
        with:
          name: Linux-x86_64-Build-JDK8
          path: /home/runner/work/Brotli4j/
          
  Linux-x86_64-Build-JDK11:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: build centos6
        run: docker-compose -f docker/docker-compose11.yml run build

  Linux-x86_64-Build-JDK17:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: build centos6
        run: docker-compose -f docker/docker-compose17.yml run build

  Linux-Aarch64-Build-JDK8:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        env:
          cache-name: cache-m2-repository
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-pr-${{ env.cache-name }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-pr-${{ env.cache-name }}-
            ${{ runner.os }}-pr-
      - uses: uraimo/run-on-arch-action@v2.3.0
        name: Run commands
        id: runcmd
        with:
          arch: aarch64
          distro: ubuntu20.04
          
          # Not required, but speeds up builds by storing container images in
          # a GitHub package registry.
          githubToken: ${{ github.token }}

          # Mount the .m2/repository
          dockerRunArgs: |
            --volume "/home/runner/.m2/repository/:/root/.m2/repository"

          # Install dependencies
          install: |
            apt-get update -q -y
            apt-get install wget gnupg2 software-properties-common -q -y
            wget -O- https://apt.corretto.aws/corretto.key | apt-key add - 
            add-apt-repository 'deb https://apt.corretto.aws stable main'
            apt-get update -q -y
            apt-get install -q -y java-1.8.0-amazon-corretto-jdk autoconf automake libtool make tar git cmake build-essential
          run: |
            chmod +x ./mvnw
            ./mvnw -B -ntp clean package
      - name: Upload the build
        uses: actions/upload-artifact@v3
        with:
          name: Linux-Aarch64-Build-JDK8
          path: /home/runner/work/Brotli4j/

  Linux-Aarch64-Build-JDK11:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        env:
          cache-name: cache-m2-repository
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-pr-${{ env.cache-name }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-pr-${{ env.cache-name }}-
            ${{ runner.os }}-pr-
      - uses: uraimo/run-on-arch-action@v2.3.0
        name: Run commands
        id: runcmd
        with:
          arch: aarch64
          distro: ubuntu20.04

          # Not required, but speeds up builds by storing container images in
          # a GitHub package registry.
          githubToken: ${{ github.token }}

          # Mount the .m2/repository
          dockerRunArgs: |
            --volume "/home/runner/.m2/repository/:/root/.m2/repository"

          # Install dependencies
          install: |
            apt-get update -q -y
            apt-get install wget gnupg2 software-properties-common -q -y
            wget -O- https://apt.corretto.aws/corretto.key | apt-key add - 
            add-apt-repository 'deb https://apt.corretto.aws stable main'
            apt-get update -q -y
            apt-get install -q -y java-11-amazon-corretto-jdk autoconf automake libtool make tar git cmake build-essential
          run: |
            chmod +x ./mvnw
            ./mvnw -B -ntp clean package

  Linux-Aarch64-Build-JDK17:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        env:
          cache-name: cache-m2-repository
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-pr-${{ env.cache-name }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-pr-${{ env.cache-name }}-
            ${{ runner.os }}-pr-
      - uses: uraimo/run-on-arch-action@v2.3.0
        name: Run commands
        id: runcmd
        with:
          arch: aarch64
          distro: ubuntu20.04

          # Not required, but speeds up builds by storing container images in
          # a GitHub package registry.
          githubToken: ${{ github.token }}
          
          shell: /bin/bash

          # Mount the .m2/repository
          dockerRunArgs: |
            --platform linux/arm64
            --volume "/home/runner/.m2/repository/:/root/.m2/repository"

          # Install dependencies
          install: |
            apt-get update -q -y
            apt-get install wget gnupg2 software-properties-common -q -y
            wget -O- https://apt.corretto.aws/corretto.key | apt-key add - 
            add-apt-repository 'deb https://apt.corretto.aws stable main'
            apt-get update -q -y
            apt-get install -q -y java-17-amazon-corretto-jdk autoconf automake libtool make tar git cmake build-essential
          run: |
            export MAVEN_OPTS="-Djdk.lang.Process.launchMechanism=vfork"
            chmod 775 ./mvnw
            ./mvnw -B -ntp clean package

  Linux-ArmV7-Build-JDK8:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        env:
          cache-name: cache-m2-repository
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-pr-${{ env.cache-name }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-pr-${{ env.cache-name }}-
            ${{ runner.os }}-pr-
      - uses: uraimo/run-on-arch-action@v2.3.0
        name: Run commands
        id: runcmd
        with:
          arch: armv7
          distro: ubuntu_latest

          # Not required, but speeds up builds by storing container images in
          # a GitHub package registry.
          githubToken: ${{ github.token }}

          # Mount the .m2/repository
          dockerRunArgs: |
            --volume "/home/runner/.m2/repository/:/root/.m2/repository"

          # Install dependencies
          install: |
            apt-get update -q -y
            apt-get install -q -y openjdk-8-jdk autoconf automake libtool make tar git cmake build-essential
          run: |
            export MAVEN_OPTS="-Xmx4G"
            chmod 775 ./mvnw
            ./mvnw -B -ntp clean package

  Linux-ArmV7-Build-JDK11:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        env:
          cache-name: cache-m2-repository
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-pr-${{ env.cache-name }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-pr-${{ env.cache-name }}-
            ${{ runner.os }}-pr-
      - uses: uraimo/run-on-arch-action@v2.3.0
        name: Run commands
        id: runcmd
        with:
          arch: armv7
          distro: ubuntu_latest

          # Not required, but speeds up builds by storing container images in
          # a GitHub package registry.
          githubToken: ${{ github.token }}

          # Mount the .m2/repository
          dockerRunArgs: |
            --volume "/home/runner/.m2/repository/:/root/.m2/repository"

          # Install dependencies
          install: |
            apt-get update -q -y
            apt-get install wget gnupg2 software-properties-common -q -y
            apt-get update -q -y
            apt-get install -q -y openjdk-11-jdk autoconf automake libtool make tar git cmake build-essential
          run: |
            chmod +x ./mvnw
            ./mvnw -B -ntp clean package

  Linux-ArmV7-Build-JDK17:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        env:
          cache-name: cache-m2-repository
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-pr-${{ env.cache-name }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-pr-${{ env.cache-name }}-
            ${{ runner.os }}-pr-
      - uses: uraimo/run-on-arch-action@v2.3.0
        name: Run commands
        id: runcmd
        with:
          arch: armv7
          distro: ubuntu_latest

          # Not required, but speeds up builds by storing container images in
          # a GitHub package registry.
          githubToken: ${{ github.token }}

          # Mount the .m2/repository
          dockerRunArgs: |
            --volume "/home/runner/.m2/repository/:/root/.m2/repository"

          # Install dependencies
          install: |
            apt-get update -q -y
            apt-get install wget gnupg2 software-properties-common -q -y
            apt-get update -q -y
            apt-get install -q -y openjdk-17-jdk autoconf automake libtool make tar git cmake build-essential
          run: |
            chmod +x ./mvnw
            ./mvnw -B -ntp clean package

  Windows-x86_64-Build-JDK8:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: 8
          architecture: x64
      - name: Enable Developer Command Prompt
        uses: ilammy/msvc-dev-cmd@v1.5.0
      - name: Build with Maven
        run: mvn -B -ntp clean package --file pom.xml
      - name: Upload the build
        uses: actions/upload-artifact@v3
        with:
          name: Windows-x86_64-Build-JDK8
          path: D:\a\Brotli4j\
          

  Windows-x86_64-Build-JDK11:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: 11
          architecture: x64
      - name: Enable Developer Command Prompt
        uses: ilammy/msvc-dev-cmd@v1.5.0
      - name: Build with Maven
        run: mvn -B -ntp clean package --file pom.xml
          

  Windows-x86_64-Build-JDK17:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: 17
          architecture: x64
      - name: Enable Developer Command Prompt
        uses: ilammy/msvc-dev-cmd@v1.5.0
      - name: Build with Maven
        run: mvn -B -ntp clean package --file pom.xml
  
